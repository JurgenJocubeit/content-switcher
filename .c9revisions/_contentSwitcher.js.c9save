{"ts":1366164838301,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"(function() {\r\n\r\n    function extend(destination, source) {\r\n      for (var property in source) {\r\n        if (typeof source[property] === \"object\") {\r\n          destination[property] = destination[property] || {};\r\n          arguments.callee(destination[property], source[property]);\r\n        } else {\r\n          destination[property] = source[property];\r\n        }\r\n      }\r\n      return destination;\r\n    }\r\n    \r\n    HTMLElement.prototype.hasClass = function(elem, className) {\r\n        return new RegExp(' ' + className + ' ').test(' ' + this.className + ' ');\r\n    };\r\n    \r\n    HTMLElement.prototype.addClass = function(elem, className) {\r\n        if (!hasClass(elem, className)) {\r\n            elem.className += ' ' + className;\r\n        }\r\n    };\r\n    \r\n    HTMLElement.prototype.toggleClass = function(className) {\r\n        var elem = this;\r\n        var newClass = ' ' + elem.className.replace( /[\\t\\r\\n]/g, ' ' ) + ' ';\r\n        if (elem.hasClass(className)) {\r\n            while (newClass.indexOf(' ' + className + ' ') >= 0 ) {\r\n                newClass = newClass.replace( ' ' + className + ' ' , ' ' );\r\n            }\r\n            elem.className = newClass.replace(/^\\s+|\\s+$/g, '');\r\n        } else {\r\n            elem.className += ' ' + className;\r\n        }\r\n    };\r\n\r\n    HTMLElement.prototype.removeClass = function(remove) {\r\n        var newClassName = \"\";\r\n        var i;\r\n        var classes = this.className.split(\" \");\r\n        for(i = 0; i < classes.length; i++) {\r\n            if(classes[i] !== remove) {\r\n                newClassName += classes[i] + \" \";\r\n            }\r\n        }\r\n        this.className = newClassName;\r\n    };\r\n    \r\n    function ContentSwitcher(container, options) {\r\n        \r\n        var defaults = {\r\n            'header'       : 'h3', \r\n            'activeIndex'  : 0, \r\n            'onChange'     : null,\r\n            'headerAsHtml' : false,\r\n            'toggleHeaders': false,\r\n            'tabLabel'     : true,\r\n            'prefix'       : '',\r\n            'classNames': {\r\n                'content'  : 'tabbed-content',\r\n                'active'   : 'active',\r\n                'tabs'     : 'tabs',\r\n                'tabItems' : 'tab-items',\r\n                'tabLabel' : 'tab-label button button-dropdown',\r\n                'headers'  : 'header-inactive'\r\n            }\r\n        };\r\n\r\n        var settings = extend(defaults, options);\r\n        \r\n        for ( var key in settings.classNames ) {\r\n            settings.classNames[key] = settings.prefix + settings.classNames[key];\r\n        }\r\n\r\n        var panels = container.childNodes;\r\n        var tabListWrapper = document.createElement('div');\r\n        var tabList = document.createElement('ul');\r\n        var tabLabel = document.createElement('a');\r\n        var tabs = [];\r\n        var activeHeader;\r\n\r\n        var removeActiveState = function() {\r\n            container.removeClass(settings.classNames.active);\r\n        };\r\n\r\n        var labelToggleActive = function(event) {\r\n            event.stopPropagation();\r\n            container.toggleClass(settings.classNames.active);\r\n            return false;\r\n        };\r\n\r\n        var destroy = function() {\r\n            tabListWrapper.parentNode.removeChild(tabListWrapper);\r\n        };\r\n        \r\n        var parsePanels = function(index) {\r\n            var panel = this;\r\n            //var header = \r\n        }\r\n\r\n        console.log(settings);\r\n        return;\r\n\r\n\r\n        var parsePanels = function(index) {\r\n            var $panel = $(this);\r\n            var $header = $panel.find(settings.header);\r\n            var id = $panel.attr(\"id\");\r\n            var $tabLink = $('<a />', {\r\n                'href': \"#\" + id\r\n            });\r\n            var $tabLi = $('<li />', {\r\n                'class': $panel.attr('class') || ''\r\n            });\r\n\r\n            var isCurrentHeader = function() {\r\n                return (activeHeader != undefined) && activeHeader == index;\r\n            };\r\n        \r\n            var tabClick = function(event) {\r\n                var $this = $(this);\r\n                var activeClass = settings.classNames.active;\r\n\r\n                $panels\r\n                    .removeClass(activeClass);\r\n                \r\n                if ( settings.toggleHeaders && !isCurrentHeader())\r\n                    $panel.removeClass(settings.classNames.headers);\r\n\r\n                $tabList\r\n                    .children()\r\n                    .removeClass(activeClass);\r\n\r\n                $panel\r\n                    .addClass(activeClass);\r\n\r\n                $tabLi\r\n                    .addClass(activeClass);\r\n                \r\n                if ( settings.tabLabel)\r\n                    $tabLabel\r\n                        .text($this.text());\r\n\r\n                if(settings.onChange)\r\n                    settings.onChange.call(this, $panel);\r\n\r\n                activeHeader = index;\r\n\r\n                event.preventDefault();\r\n            };\r\n\r\n            $header.on('click', function() {\r\n\r\n                if ( settings.toggleHeaders && isCurrentHeader())\r\n                    $panel.toggleClass(settings.classNames.headers);\r\n\r\n                $tabLink.click();\r\n                \r\n            });\r\n\r\n            $tabLink.html(\r\n                settings.headerAsHtml \r\n                    ? $header.html() \r\n                    : $header.text()\r\n\r\n            ).on('click', tabClick);\r\n            \r\n            $('[data-toggle-content=\"' + id + '\"]').on('click', function(event) {\r\n                $panel.removeClass(settings.classNames.headers);\r\n                $tabLink.click();\r\n                event.preventDefault();\r\n            });\r\n\r\n            $tabLi.append($tabLink);\r\n            $tabList.append($tabLi);\r\n\r\n            tabs.push($tabLi);\r\n        };\r\n\r\n        $tabListWrapper\r\n            .addClass(settings.classNames.tabItems);\r\n        \r\n        if ( settings.tabLabel)\r\n            $tabListWrapper.append($tabLabel);\r\n\r\n        $tabListWrapper\r\n            .append($tabList);\r\n\r\n        $container\r\n            .addClass(settings.classNames.tabs)\r\n            .prepend($tabListWrapper);\r\n\r\n        $('html').on('click', removeActiveState);\r\n\r\n        if ( settings.tabLabel)\r\n            $tabLabel.on('click', labelToggleActive);\r\n\r\n        $panels\r\n            .each(parsePanels)\r\n            .addClass(settings.classNames.content);\r\n\r\n        $(tabs[settings.activeIndex])\r\n            .find('a')\r\n            .click();\r\n\r\n        return {\r\n            'destroy': destroy\r\n        }\r\n    }\r\n\r\n    $.fn.contentSwitcher = function(args) {\r\n        return this.each(function(){\r\n            if (undefined == $(this).data('contentSwitcher')) {\r\n                var plugin = new ContentSwitcher(this, args);\r\n                $(this).data('contentSwitcher', plugin);\r\n            }\r\n        });\r\n    };\r\n\r\n})();"]],"start1":0,"start2":0,"length1":0,"length2":6817}]],"length":6817}
